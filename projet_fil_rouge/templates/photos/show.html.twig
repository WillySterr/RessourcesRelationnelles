{% extends 'base.html.twig' %}

{% block title %}Photos{% endblock %}

{% block body %}

  <input id="ressource-id" type="hidden" value="{{ ressourceId }}">


 
    <!--Section: Content-->
    <section class="px-md-5 my-5 mx-md-5 dark-grey-text text-center text-lg-left">

      <!--Grid row-->
      <div class="row">

        <!--Grid column-->
        <div class="col-lg-6 mb-4 mb-lg-0 d-flex align-items-center justify-content-center">

          <img src="{{ asset('/uploads/'~photo.image) }}" class="img-fluid" alt="{{photo.titre}}">

        </div>
        <!--Grid column-->

        <!--Grid column-->
        <div class="col-lg-6 mb-4 mb-lg-0">

          <h3 class="font-weight-bold"> Titre de la photo : {{ photo.titre}}</h3>

          <p class="font-weight-bold">Crée le {% if photo.updatedAt != null %}
                    {{ photo.updatedAt|date('d-m-Y')  }}
                {% else %}
                    {{ photo.createdAt|date('d-m-Y')  }}
                {% endif %}</p>

          <p>Sa description : {{ photo.description }}</p>
          <div class="d-flex">
          <a class="btn btn-indigo" href="{{ path('photos_index') }}">Retour</a><br/>
          <a class="btn btn-deep-orange" href="{{ path('photos_edit', {'id': photo.id}) }}">Modifier</a>
          {{ include('photos/_delete_form.html.twig') }}
          </div>

        </div>
        <!--Grid column-->

      </div>
      <!--Grid row-->

      <input class="form-control comments_contenu w-75" id="comments-text" name="comments" type="text" placeholder="Saisissez votre commentaire">

      <ul id="comments-box" class="comments-list">

      </ul>


    </section>
  <script>
    document.addEventListener("DOMContentLoaded", function() {

      var xhr = new XMLHttpRequest();
      //On récupère la box dans laquelle on mettra les commentaires

      let commentsBox = document.querySelector('#comments-box');

      //On récupère l'id de la ressource

      let ressourceId = document.querySelector('#ressource-id').value;

      let commentsText = document.querySelector('#comments-text');



      const requestParams = {
        "idRessource" : ressourceId
      }

      ajaxRequestGetRessourceComments(xhr,requestParams, commentsBox);

      commentsText.addEventListener('keypress', function(e){
        if(e.key === "Enter"){
          const requestParamsAddComments = {
            "idRessource" : ressourceId,
            "comments": commentsText.value
          }
          addNewComments(xhr, requestParamsAddComments, commentsBox);
          commentsText.value = ""
        }
      })
    });

    function ajaxRequestGetRessourceComments(xhr, requestParams, commentsBox){

      xhr.open('POST', '{{ path('get_comments') }}', true);
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      xhr.onreadystatechange = function() { //Appelle une fonction au changement d'état.
        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {

          let data = xhr.response;
          loadData(data, commentsBox);
        }
      }
      xhr.responseType = 'json';
      xhr.send(JSON.stringify(requestParams));
    }


    function loadData(data, commentsBox){

      for (let i = 0; i < data.length; i++) {
        let eachComment = document.createElement("li");
        eachComment.setAttribute('class', 'comment mt-2')
        eachComment.innerHTML = `<a class="pull-left" href="javascript:void(0);">
              <img class="avatar rounded-circle" src="https://bootdey.com/img/Content/avatar/avatar1.png" style="width: 5%"alt="avatar">
            </a>
            <h5 class="user a">${data[i].user.firstName} ${data[i].user.lastName}  a commenté</h5><a href="#"><i class="fas fa-reply ml-2"></i></a>
             {#<p class="time">#}
             {#                               {% if comments.updatedAt is not null %}#}
             {#                                   {{ comments.updatedAt|date('Y-m-d H:i:s')  }}#}
             {#                               {% else %}#}
             {#                                   {{ comments.createdAt|date('Y-m-d H:i:s')  }}#}
             {#                               {% endif %}#}
             {#                           </p>#}
            <div class="comment-body">
              <div>
                <p>${data[i].contenu}</p>
              </div>
            </div>
          `;

        commentsBox.appendChild(eachComment);
      }
    }

    function addNewComments(xhr, requestParams, commentsBox){

      xhr.open('POST', '{{ path('new_comments') }}', true);
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      xhr.onreadystatechange = function() { //Appelle une fonction au changement d'état.
        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
          commentsBox.innerHTML = '';
          let data = xhr.response;
          loadData(data, commentsBox);
        }
      }
      xhr.responseType = 'json';
      xhr.send(JSON.stringify(requestParams));


    }
  </script>
  {% block javascript %}{% endblock %}
{% endblock %}
